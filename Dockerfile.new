FROM node:20-alpine AS build

# Set working directory
WORKDIR /app

# Install pnpm with specific version
RUN npm install -g pnpm@10.7.1

# Install Python and required system packages
# Added essential development headers for scikit-learn compilation
RUN apk add --no-cache \
    python3 \
    python3-dev \
    py3-pip \
    make \
    g++ \
    pkgconfig \
    pixman-dev \
    cairo-dev \
    pango-dev \
    jpeg-dev \
    giflib-dev \
    linux-headers \
    musl-dev \
    gcc \
    libc-dev \
    libffi-dev \
    openblas-dev

# Copy package files for caching
COPY package.json ./

# Install Node dependencies with pnpm
RUN pnpm config set ignore-pnpmfile true && \
    pnpm config set auto-install-peers true && \
    pnpm install --prod --no-optional && \
    pnpm install -D esbuild

# Set up Python virtual environment with system site packages
RUN python3 -m venv /app/venv --system-site-packages
ENV PATH="/app/venv/bin:$PATH"
ENV PYTHONUNBUFFERED=1

# Copy Python requirements separately for better caching
COPY server/python/requirements.txt ./server/python/

# Install scikit-learn separately with optimized settings
RUN pip install --upgrade pip && \
    pip install setuptools wheel cython && \
    pip install scikit-learn==1.3.2

# Install the rest of Python requirements with increased timeout
RUN pip install --default-timeout=100 -r server/python/requirements.txt

# Download NLTK data
RUN python -c "import nltk; nltk.download('punkt', download_dir='/app/nltk_data')"

# Copy source code
COPY . .

# Build the application with increased memory allocation
ENV NODE_OPTIONS="--max-old-space-size=4096"
RUN NODE_ENV=production pnpm run build

# Production image
FROM node:20-alpine

# Set working directory
WORKDIR /app

# Install pnpm with specific version
RUN npm install -g pnpm@10.7.1

# Install runtime dependencies
RUN apk add --no-cache \
    python3 \
    python3-dev \
    pixman \
    cairo \
    pango \
    jpeg \
    giflib \
    openblas

# Copy built app and dependencies from build stage
COPY --from=build /app/dist ./dist
COPY --from=build /app/node_modules ./node_modules
COPY --from=build /app/server/python ./server/python
COPY --from=build /app/venv /app/venv
COPY --from=build /app/nltk_data /usr/local/share/nltk_data

# Set environment for Python
ENV PATH="/app/venv/bin:$PATH"
ENV PYTHONPATH=/app/venv/lib/python3.*/site-packages
ENV NLTK_DATA=/usr/local/share/nltk_data
ENV PYTHONUNBUFFERED=1

# Expose the port for HTTP and WebSocket
EXPOSE 5000

# Define environment variables
ENV NODE_ENV=production
ENV PORT=5000

# Run the application
CMD ["node", "dist/index.js"]