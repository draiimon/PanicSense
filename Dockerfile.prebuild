# Use an official Debian image with Python 3.11 pre-installed
FROM python:3.11-bullseye

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    NLTK_DATA=/usr/local/share/nltk_data \
    NODE_VERSION=20.x

# Install dependencies for Node.js and Python
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    gnupg \
    build-essential \
    python3-dev \
    python3-pip \
    python3-setuptools \
    python3-wheel \
    python3-venv \
    git \
    libopenblas-dev \
    gfortran \
    && curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION} | bash - \
    && apt-get install -y nodejs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install pnpm
RUN npm install -g pnpm@10.7.1

# Set up Python virtual environment
WORKDIR /app
RUN python -m venv /app/venv
ENV PATH="/app/venv/bin:$PATH"

# Install pre-built Python wheels to avoid compilation issues
COPY server/python/requirements.txt /app/
RUN pip install --upgrade pip && \
    pip install wheel setuptools cython && \
    pip install numpy==1.26.4 && \
    # Install scikit-learn from a pre-built wheel
    pip install scikit-learn==1.3.2 && \
    # Install PyTorch with CPU support
    pip install torch==2.2.0+cpu --extra-index-url https://download.pytorch.org/whl/cpu && \
    # Install other dependencies
    pip install -r requirements.txt

# Download NLTK data
RUN python -c "import nltk; nltk.download('punkt', download_dir='$NLTK_DATA')"

# Install Node.js dependencies
COPY package.json /app/
RUN pnpm install --frozen-lockfile

# Copy the rest of the application
COPY . /app/

# Build the application
ENV NODE_OPTIONS="--max-old-space-size=4096"
RUN NODE_ENV=production pnpm run build

# Expose port
EXPOSE 5000

# Set environment variables for production
ENV NODE_ENV=production \
    PORT=5000

# Start the application
CMD ["node", "dist/index.js"]