# ----------------------------
# STAGE 1: BUILD NODE ARTIFACTS
# ----------------------------
FROM node:20.19.0-slim AS builder
WORKDIR /app

# 1. Copy root package.json to leverage cache for any topâ€‘level scripts
COPY package*.json ./
RUN npm ci --no-audit --no-fund --prefer-offline

# 2. Copy client and server manifests, then install/build each
# CLIENT
COPY client/package*.json ./client/
WORKDIR /app/client
RUN npm ci --no-audit --no-fund --prefer-offline

# Copy client source code and build
COPY client ./
RUN npm run build

# SERVER
WORKDIR /app
COPY server/package*.json ./server/
WORKDIR /app/server
RUN npm ci --no-audit --no-fund --prefer-offline

# Copy server source code
COPY server ./

# 3. Stage static assets for production
WORKDIR /app
RUN mkdir -p server/public \
 && cp -r client/dist/* server/public/

# ----------------------------
# STAGE 2: FINAL IMAGE
# ----------------------------
FROM python:3.11-slim
WORKDIR /app

# 4. System dependencies + Node.js runtime
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
      curl gnupg libpq-dev \
 && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
 && apt-get install -y --no-install-recommends nodejs \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/* \
 && npm cache clean --force

# 5. Copy Node artifacts from builder
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/client/dist ./client/dist
COPY --from=builder /app/server ./server
COPY --from=builder /app/server/public ./server/public

# 6. Copy application source code
COPY migrations ./migrations
COPY shared ./shared
COPY drizzle.config.ts ./
COPY package*.json ./
COPY postcss.config.js ./
COPY tailwind.config.ts ./
COPY server.js ./

# 7. Copy your helper script & make it executable
COPY start.sh ./
RUN chmod +x start.sh

# 8. Install Python ML dependencies
COPY server/python/requirements.txt ./server/python/
RUN pip install --no-cache-dir --timeout=180 --retries=3 \
      torch==2.1.2 --index-url https://download.pytorch.org/whl/cpu \
 && pip install --no-cache-dir -r server/python/requirements.txt \
 && find /usr/local -name '*.pyc' -delete \
 && find /usr/local -name '__pycache__' -delete \
 && pip cache purge

# 9. Environment & ports
ENV NODE_ENV=production
ENV PORT=5000
ENV TZ=Asia/Manila
EXPOSE 5000

# 10. Healthcheck for Render's monitoring
HEALTHCHECK --interval=30s --timeout=5s --start-period=20s --retries=3 \
  CMD curl -sSf http://localhost:$PORT/api/health || exit 1

# 11. Launch server via server.js directly (no need for start.sh in production)
# Since we've already built everything in the builder stage
CMD ["node", "server.js"]