#!/bin/bash
# PANICSENSE RENDER DEPLOYMENT - COMPREHENSIVE SETUP SCRIPT
# This script prepares the frontend and backend for deployment on Render
# Created by Expert Software Developer - Optimized for Render

echo "=== üåã PANICSENSE RENDER DEPLOYMENT SETUP SCRIPT ==="
echo "Setting up your environment for successful deployment"

# Set up directories
echo "Creating required directories..."
mkdir -p client/dist
mkdir -p public
mkdir -p dist/public
mkdir -p temp_files
mkdir -p uploads
mkdir -p python

# Ensure PythonService script is available in python directory
if [ ! -f "python/process.py" ]; then
  echo "WARNING: Missing Python scripts in python directory. Attempting to find and copy..."
  
  # Try to find the Python scripts wherever they might be
  if find . -name "process.py" -not -path "*/node_modules/*" -not -path "*/\.*" | grep -q .; then
    SCRIPT_PATH=$(find . -name "process.py" -not -path "*/node_modules/*" -not -path "*/\.*" | head -n 1)
    echo "Found process.py at $SCRIPT_PATH"
    SCRIPT_DIR=$(dirname "$SCRIPT_PATH")
    
    # Copy all files from the directory containing process.py
    mkdir -p python
    cp -r "$SCRIPT_DIR"/* python/
    echo "‚úÖ Copied Python scripts to python directory"
  else
    echo "‚ö†Ô∏è Could not find Python scripts. AI features may not work."
  fi
fi

# Build a full frontend copy to ensure we have all potential files
echo "Setting up frontend files..."

# Check and process client/dist if it exists
if [ -d "client/dist" ]; then
  echo "üì¶ Found client/dist directory, copying to production location..."
  # Clean target directory first
  rm -rf dist/public/*
  
  # Copy everything from client/dist to dist/public
  cp -r client/dist/* dist/public/
  echo "‚úÖ Copied frontend files from client/dist to dist/public"
  
  # Check if assets were copied
  if [ -d "dist/public/assets" ]; then
    echo "‚úÖ Assets directory verified in dist/public/assets"
  else
    echo "‚ö†Ô∏è No assets directory found after copy, searching for assets elsewhere..."
    
    # Try to find assets in client directory
    if [ -d "client/assets" ]; then
      mkdir -p dist/public/assets
      cp -r client/assets/* dist/public/assets/
      echo "‚úÖ Copied assets from client/assets to dist/public/assets"
    fi
  fi
else
  echo "‚ö†Ô∏è client/dist folder not found. Checking other possible locations..."
  
  # Check if public directory has frontend files
  if [ -d "public" ] && [ "$(ls -A public)" ]; then
    echo "üì¶ Found files in public directory, copying to production location..."
    cp -r public/* dist/public/
    echo "‚úÖ Copied frontend files from public to dist/public"
  fi
fi

# Verify index.html exists, create placeholder if it doesn't
if [ ! -f "dist/public/index.html" ]; then
  echo "Creating placeholder frontend files..."
  mkdir -p dist/public
  cat > dist/public/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>PanicSense API Server</title>
  <style>
    body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; line-height: 1.6; }
    header { background-color: #e74c3c; color: white; padding: 20px; border-radius: 5px; }
    h1 { margin: 0; }
    .content { margin-top: 20px; }
    .api-box { background: #f9f9f9; padding: 15px; border-radius: 5px; border-left: 4px solid #e74c3c; margin: 20px 0; }
    footer { margin-top: 30px; font-size: 0.8em; color: #666; border-top: 1px solid #eee; padding-top: 10px; }
  </style>
</head>
<body>
  <header>
    <h1>PanicSense API Server</h1>
  </header>
  <div class="content">
    <p>The PanicSense backend API server is running correctly.</p>
    <div class="api-box">
      <h3>API Available</h3>
      <p>The API endpoints are available at <code>/api/*</code></p>
      <p>Key endpoints:</p>
      <ul>
        <li><code>/api/health</code> - Server health check</li>
        <li><code>/api/sentiment-posts</code> - Get analyzed sentiment data</li>
        <li><code>/api/disaster-events</code> - Get disaster events data</li>
      </ul>
    </div>
    <p>This is the API-only mode. Frontend files were not found during deployment.</p>
  </div>
  <footer>
    <p>PanicSense Disaster Intelligence Platform | Generated by Render deployment script</p>
  </footer>
</body>
</html>
EOF
  echo "‚úÖ Created enhanced API-only mode placeholder page"
fi

# Install Python dependencies for AI processing
if [ -f "python/process.py" ]; then
  echo "üêç Installing minimal Python dependencies for AI processing..."
  # Install core dependencies needed for the Python analyzer
  pip install --no-cache-dir pandas numpy requests nltk langdetect -q
  # Install optional AI dependencies if needed
  pip install --no-cache-dir openai anthropic -q
  # Download necessary NLTK data
  python -c "import nltk; nltk.download('punkt', quiet=True); nltk.download('stopwords', quiet=True);"
  echo "‚úÖ Installed Python dependencies for AI processing"
fi

# Create required placeholder directories for file uploads
mkdir -p uploads/temp
mkdir -p temp_files
chmod 777 uploads uploads/temp temp_files

echo "=== üéâ SETUP COMPLETE ==="
echo "Your PanicSense application is ready for deployment!"
echo "Static files will be served from dist/public"