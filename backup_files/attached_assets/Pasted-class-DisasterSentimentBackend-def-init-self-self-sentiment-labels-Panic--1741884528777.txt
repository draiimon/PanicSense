class DisasterSentimentBackend:
    def __init__(self):
        self.sentiment_labels = ['Panic', 'Fear/Anxiety', 'Disbelief', 'Resilience', 'Neutral']
        self.groq_api_keys = [
            "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",
            "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",
            "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",
            "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",
            "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",
            "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",
            "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",
            "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",
            "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",
            "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",
            "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",
            "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"
        ]
        self.groq_api_url = "https://api.groq.com/openai/v1/chat/completions"
        self.groq_retry_delay = 1
        self.groq_limit_delay = 0.5
        self.current_api_index = 0
        self.max_retries = 3  # Maximum retry attempts for API requests

    def initialize_models(self):
        pass

    def detect_slang(self, text):
        return text

    def fetch_groq(self, headers, payload, retry_count=0):
        try:
            response = requests.post(self.groq_api_url, headers=headers, json=payload)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            if response.status_code == 429:
                logging.warning(f"LOADING SENTIMENTS..... (Data {self.current_api_index + 1}/{len(self.groq_api_keys)}). Data Fetching.....")
                self.current_api_index = (self.current_api_index + 1) % len(self.groq_api_keys)
                logging.info(f"Waiting {self.groq_limit_delay} seconds before trying next key")
                time.sleep(self.groq_limit_delay)
                if retry_count < self.max_retries:
                    return self.fetch_groq(headers, payload, retry_count + 1)
                else:
                    logging.error("Max retries exceeded for rate limit.")
                    return None
            else:
                logging.error(f"Groq API Error: {e}")
                time.sleep(self.groq_retry_delay)
                if retry_count < self.max_retries:
                    return self.fetch_groq(headers, payload, retry_count + 1)
                else:
                    logging.error("Max retries exceeded for API error.")
                    return None
        except Exception as e:
            logging.error(f"Groq API Request Error: {e}")
            time.sleep(self.groq_retry_delay)
            if retry_count < self.max_retries:
                return self.fetch_groq(headers, payload, retry_count + 1)
            else:
                logging.error("Max retries exceeded for request error.")
                return None

    def analyze_sentiment(self, text):
        api_key = self.groq_api_keys[self.current_api_index]
        headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
        payload = {
            "messages": [{"role": "user", "content": f"Analyze the overall sentiment of this disaster-related text. Choose between: Panic, Fear/Anxiety, Disbelief, Resilience, or Neutral. Text: {text} Sentiment:"}],
            "model": "mixtral-8x7b-32768",
            "temperature": 0.6,
            "max_tokens": 20,
        }