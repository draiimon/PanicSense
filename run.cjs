/**
 * PanicSense Runner - Single Entry Point for Render.com
 * Handles all necessary setup and starts the application
 * 
 * Usage on Render.com:
 * - Build Command: npm install
 * - Start Command: node run.cjs
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üåã PANICSENSE FULL DEPLOYMENT INITIALIZER');
console.log('Preparing environment for successful deployment...');

// Execute render-setup.sh to prepare the environment
try {
  if (fs.existsSync('./render-setup.sh')) {
    console.log('üìã Running setup script to prepare frontend and backend...');
    execSync('./render-setup.sh', { stdio: 'inherit' });
    console.log('‚úÖ Setup script completed successfully');
  } else {
    console.log('‚ö†Ô∏è No setup script found, running manual setup...');
    
    // Create required directories
    console.log('üìÅ Creating required directories...');
    ['client/dist', 'public', 'dist/public', 'temp_files', 'uploads', 'python'].forEach(dir => {
      try {
        fs.mkdirSync(dir, { recursive: true });
        console.log(`  ‚úì Created ${dir}`);
      } catch (err) {
        console.log(`  ‚ö†Ô∏è Could not create ${dir}: ${err.message}`);
      }
    });
    
    // Check for frontend files
    const clientDistPath = path.join(process.cwd(), 'client', 'dist');
    const distPublicPath = path.join(process.cwd(), 'dist', 'public');
    
    if (fs.existsSync(path.join(clientDistPath, 'index.html'))) {
      console.log('üîç Found frontend files in client/dist, copying to dist/public...');
      // List files in client/dist
      const files = fs.readdirSync(clientDistPath);
      console.log(`  Found ${files.length} files/directories in client/dist`);
      
      // Copy directory contents
      files.forEach(file => {
        try {
          const src = path.join(clientDistPath, file);
          const dest = path.join(distPublicPath, file);
          
          if (fs.statSync(src).isDirectory()) {
            fs.mkdirSync(dest, { recursive: true });
            // Recursively copy directory contents
            execSync(`cp -r ${src}/* ${dest}/`, { stdio: 'ignore' });
          } else {
            // Copy file
            fs.copyFileSync(src, dest);
          }
          console.log(`  ‚úì Copied ${file}`);
        } catch (err) {
          console.log(`  ‚ö†Ô∏è Error copying ${file}: ${err.message}`);
        }
      });
    } else {
      console.log('‚ö†Ô∏è No frontend files found in client/dist');
      
      // Create placeholder index.html
      console.log('üìÑ Creating placeholder API server page...');
      const placeholder = `
        <!DOCTYPE html>
        <html>
          <head>
            <title>PanicSense API Server</title>
            <style>
              body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
              h1 { color: #e74c3c; }
              .api-box { background: #f9f9f9; padding: 15px; border-radius: 5px; border-left: 4px solid #e74c3c; }
            </style>
          </head>
          <body>
            <h1>PanicSense API Server</h1>
            <p>The backend API server is running correctly.</p>
            <div class="api-box">
              <h3>API Available</h3>
              <p>The API endpoints are available at <code>/api/*</code></p>
            </div>
            <p><small>Generated by Render deployment script.</small></p>
          </body>
        </html>
      `;
      
      try {
        fs.writeFileSync(path.join(distPublicPath, 'index.html'), placeholder);
        console.log('  ‚úì Created placeholder index.html');
      } catch (err) {
        console.log(`  ‚ö†Ô∏è Error creating placeholder: ${err.message}`);
      }
    }
  }
} catch (error) {
  console.error('‚ö†Ô∏è Setup error:', error.message);
  console.log('Continuing with server startup anyway...');
}

console.log('üöÄ Starting PanicSense application...');

// Start the application
require('./index.js');